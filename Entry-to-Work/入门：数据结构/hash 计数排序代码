
// 数组
a<- {'0':0, '1':2, '2':1, '3':56, '4':3, '5':67, '6':3, 'length':7 }


/*
入桶后 hash 实现的效果如下
hash <- {
	'0':1
	'1':1
	'2':1,
	'3':2,
	'56':1
	'67':1
}
*/
// 声明哈希，前面是数字，后面是该数字出现的次数。计算数字出现的次数，这就是计数排序。
hash <- {}



//  入桶
index1 <- 0 // index1是针对 a 数组的索引
while(index1 < a['length']) // index1 小于7
	number = a[index1]  // 0,2,1,56,3,67,3

	// hash[number]表示一个数在 hash 中出现的次数。如果此前该数未出现过，则赋值为1
	if hash[number] == defined 
		hash[number] = 1
	else  
		// 如果这个数此前已经出现过，则 hash[number] 要加上1
		hash[number] = hash[number] + 1
	end
	index1 <- index1 +1 
end


//  出桶
index2 <- 0 // index2是针对 hash 的索引
max <- findMax(a) // 给 max 赋值为数组 a 中的最大值
newArr <- {} // 声明一个空数组
while(index2 < max+1) // 循环的条件为，index2的值小于 a 数组最大数+1
	count =hash[index2] // 给count表示的是一个数在 hash中出现的次数
	if count != undefined // 如果 count 不为空
		countIndex = 0 // countIndex批是的是推入数组的次数，赋值为0
		while(countIndex < count) // 循环条件是 countIndex < count
			newArr.push(index2) // 在满足条件的情况下不停推数字到数组当中
			countIndex <- countIndex + 1
		end
	end
	index2 <- index2 + 1
end
print newArr
